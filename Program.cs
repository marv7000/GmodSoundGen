/// MIT License
/// Program by marv7000

namespace GmodSoundGen;

public class SoundGen
{
    static readonly string Version = "0518";
    
    public static void Main(string[] args)
    {
        Console.ForegroundColor = ConsoleColor.White;
        Interop.WriteLog($"GmodSoundGen v{Version}", Interop.MessageType.Info);
        try
        {
            Interop.WriteLog($"Reading file:\t{args[0]}", Interop.MessageType.Info);
            Interop.WriteLog("Key column: ", Interop.MessageType.Info);
            int keyCol = int.Parse(Console.ReadLine());
            Interop.WriteLog("Value column: ", Interop.MessageType.Info);
            int valueCol = int.Parse(Console.ReadLine());
            Interop.WriteLog("Sound type column: ", Interop.MessageType.Info);
            int typeCol = int.Parse(Console.ReadLine());
            Interop.WriteLog("Skip first line? (y/n) ", Interop.MessageType.Info);
            bool skip = Console.ReadLine() == "y" ? true : false;
            var file = ReadCSV(args[0], keyCol, valueCol, typeCol, skip);
            WriteLua(args[0].Replace(".csv", ".lua"), file);
            Interop.WriteLog("Done!", Interop.MessageType.Info);
            Console.ReadLine();
        }
        catch(Exception e)
        {
            Interop.WriteLog(e.Message, Interop.MessageType.Error);
            return;
        }
    }

    /// <summary>
    /// Reads 2 columns from a csv into a 2D string array.
    /// </summary>
    /// <param name="file">Path to the file.</param>
    /// <param name="keyCol">Column of the keys to read.</param>
    /// <param name="valueCol">Column of the values to read.</param>
    /// <returns>2D string array containing read data.</returns>
    static string[,] ReadCSV(string file, int keyCol, int valueCol, int typeCol, bool skip)
    {
        var lines = File.ReadAllLines(file);
        var length = lines.Length;
        if (skip)
            length--;
        var result = new string[length, 3];
        
        for (int i = 0; i < length; i++)
        {
            string? line;
            
            if(skip)
                line = lines[i+1];
            else
                line = lines[i];
            
            var split = line.Split(',');
            result[i, 0] = split[keyCol];
            result[i, 1] = split[valueCol];
            result[i, 2] = split[typeCol];
        }
        return result;
    }


    /// <summary>
    /// Enumerates all read sound names and assigns each pair to one key.
    /// </summary>
    /// <param name="file"></param>
    /// <returns></returns>
    public static Dictionary<string, List<string>> Enumerate(string[,] file)
    {
        Dictionary<string, List<string>> output = new Dictionary<string, List<string>>();

        for (int i = 0; i < file.GetLength(0); i++)
        {
            if (!output.ContainsKey(file[i, 0]))
            {
                List<string> list = new List<string>();
                list.Add(file[i, 1]);

                output.Add(file[i, 0], list);
            }
            else
            {
                output[file[i, 0]].Add(file[i, 1]);
            }
        }

        return output;
    }

    /// <summary>
    /// Writes the generated data to a .lua file.
    /// </summary>
    /// <param name="filePath">Path to write to.</param>
    /// <param name="csv">Data to write.</param>
    /// <returns>True, if operation succeeded, otherwise false.</returns>
    public static bool WriteLua(string filePath, string[,] csv)
    {
        try
        {
            var dict = Enumerate(csv);
            int[] offset = new int[dict.Keys.Count];
            for (int i = 0; i < dict.Keys.Count; i++)
            {
                offset[i] = dict.ElementAt(i).Value.Count;
            }
            using (StreamWriter file = new StreamWriter(filePath))
            {
                file.WriteLine("-- Generated by GmodSoundGen\n");

                file.WriteLine("-- File: " + filePath);

                int k = 0;
                for(int i = 0; i < dict.Keys.Count; i++)
                {
                    if (csv[offset[i], 2] != "foley_wpn_plr")
                        continue;
                    file.WriteLine(@"sound.Add({");
                    Interop.WriteLog($"Processing element {dict.Keys.ElementAt(i)}", Interop.MessageType.Debug);
                    file.WriteLine($"\tname = \"{dict.Keys.ElementAt(i)}\",");
                    if (csv[offset[i], 2] == "foley_wpn_plr")
                    {
                        k++;
                        file.WriteLine($"\tchannel = CHAN_WPNFOLEY + {k},");
                    }
                    else
                    {
                        file.WriteLine($"\tchannel = CHAN_WEAPON,");
                    }
                    file.WriteLine("\tlevel = 140,");
                    file.WriteLine("\tvolume = 1,");
                    file.WriteLine("\tpitch = {90,110},");
                    file.WriteLine("\tsound = {");
                    for (int j = 0; j < dict.Values.ElementAt(i).Count; j++)
                    {
                        file.WriteLine($"\t\t\"{dict.Values.ElementAt(i).ElementAt(j).Replace('\\', '/').Split('.')[0] + ".ogg"}\",");
                    }
                    file.WriteLine("\t\t}");
                    file.WriteLine("})");
                }
            }
            return true;
        }
        catch (Exception e)
        {
            Interop.WriteLog(e.Message, Interop.MessageType.Error);
            return false;
        }
    }
}